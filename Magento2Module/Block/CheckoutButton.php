<?php

namespace SpellPayment\ExpressCheckout\Block;

use Magento\Catalog\Block\Product\Context;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Locale\Resolver;
use Magento\Framework\View\Element\Template;

class CheckoutButton extends Template
{
    /**
     * @var ScopeConfigInterface
     */
    private $scopeConfig;

    /**
     * @var Resolver
     */
    private $store;

    /**
     * CheckoutButton constructor.
     *
     * @param Context $context
     * @param ScopeConfigInterface $scopeConfig
     * @param Resolver $store
     * @param array $data
     */
    public function __construct(
        Context $context,
        ScopeConfigInterface $scopeConfig,
        Resolver $store,
        array $data = []
    ) {
        parent::__construct($context, $data);
        $this->scopeConfig = $scopeConfig;
        $this->store = $store;
    }

    /**
     * Check if express checkout is enabled
     *
     * @return string
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function toHtml()
    {
        if (!$this->isExpressCheckoutEnabled()) {
            return '';
        }

        return parent::toHtml(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     * @since 100.2.0
     */
    public function getJsLayout(): string
    {
        $buttonText = $this->scopeConfig->getValue(
            'payment/spellpayment_checkout/express_checkout_button_text',
            'stores',
            $this->_storeManager->getStore()->getId()
        );
        $purchaseUrl = $this->getUrl('spellpayment/checkout/start', ['_secure' => true]);
        $purchaseUrlCart = $this->getUrl('spellpayment/checkout/startCart', ['_secure' => true]);

        // String data does not require escaping here and handled on transport level and on client side
        $this->jsLayout['components']['express-checkout']['config']['imageUrl'] = $this->getButtonImageUrl();
        $this->jsLayout['components']['express-checkout']['config']['buttonText'] = $buttonText;
        $this->jsLayout['components']['express-checkout']['config']['purchaseUrl'] = $purchaseUrl;
        $this->jsLayout['components']['express-checkout']['config']['purchaseUrlCart'] = $purchaseUrlCart;
        return parent::getJsLayout();
    }

    /**
     * Get button image url depending on store locale
     *
     * @return string
     */
    public function getButtonImageUrl(): string
    {
        $locale = $this->store->getLocale();
        switch ($locale) {
            case 'lv_LV':
                $imageUrl = 'https://developers.klix.app/images/logos/quick-checkout-lv.gif';
                break;
            case 'lt_LT':
                $imageUrl = 'https://developers.klix.app/images/logos/quick-checkout-lt.gif';
                break;
            case 'ru_RU':
                $imageUrl = 'https://developers.klix.app/images/logos/quick-checkout-ru.gif';
                break;
            case 'et_EE':
                $imageUrl = 'https://developers.klix.app/images/logos/quick-checkout-ee.gif';
                break;
            default:
                $imageUrl = 'https://developers.klix.app/images/logos/quick-checkout-en.gif';
                break;
        }
        return $imageUrl;
    }

    /**
     * Check if express checkout is enabled
     *
     * @return mixed
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function isExpressCheckoutEnabled()
    {
        return $this->scopeConfig->getValue(
                'payment/spellpayment_checkout/active',
                'stores',
                $this->_storeManager->getStore()->getId()
            ) && $this->scopeConfig->getValue(
                'payment/spellpayment_checkout/enable_express',
                'stores',
                $this->_storeManager->getStore()->getId()
            );
    }

    /**
     * @return mixed
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getCustomStyles()
    {
        return $this->scopeConfig->getValue(
            'payment/spellpayment_checkout/express_custom_styles',
            'stores',
            $this->_storeManager->getStore()->getId()
        );
    }
}
